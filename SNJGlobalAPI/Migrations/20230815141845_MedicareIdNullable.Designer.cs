// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SNJGlobalAPI.DbModels.SNJContext;

#nullable disable

namespace SNJGlobalAPI.Migrations
{
    [DbContext(typeof(GlobalAPIContext))]
    [Migration("20230815141845_MedicareIdNullable")]
    partial class MedicareIdNullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SNJGlobalAPI.DbModels.AgentPenalty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Fk_LeadID")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_PenaltyFrom")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_PenaltyTo")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_StageId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Fk_LeadID");

                    b.HasIndex("Fk_PenaltyFrom");

                    b.HasIndex("Fk_PenaltyTo");

                    b.HasIndex("Fk_StageId");

                    b.ToTable("AgentPenalty");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Eligibility", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("ElgibilityRemarks")
                        .HasMaxLength(575)
                        .HasColumnType("nvarchar(575)");

                    b.Property<int?>("FK_LeadID")
                        .HasColumnType("int");

                    b.Property<int?>("FK_StatusId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("HCPSCode")
                        .HasMaxLength(275)
                        .HasColumnType("nvarchar(275)");

                    b.Property<string>("PrimaryInsurance")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FK_LeadID");

                    b.HasIndex("FK_StatusId");

                    b.ToTable("Eligibilities");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.ForgetPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Fk_UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UsedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Fk_UserId");

                    b.ToTable("ForgetPasswords");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Lead", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_StatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDuplicate")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("Fk_ParentId");

                    b.HasIndex("Fk_PatientId");

                    b.HasIndex("Fk_StatusId");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.LeadComments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_LeadID")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_StageId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("FK_LeadID");

                    b.HasIndex("Fk_StageId");

                    b.ToTable("LeadComments");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.LeadFile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_LeadID")
                        .HasColumnType("int");

                    b.Property<int?>("FK_StageId")
                        .HasColumnType("int");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FK_LeadID");

                    b.HasIndex("FK_StageId");

                    b.ToTable("LeadFiles");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.LeadProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_LeadID")
                        .HasColumnType("int");

                    b.Property<int?>("FK_ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("StageID")
                        .HasColumnType("int");

                    b.Property<int?>("SubProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("FK_LeadID");

                    b.HasIndex("FK_ProductId");

                    b.HasIndex("StageID");

                    b.HasIndex("SubProductID");

                    b.ToTable("LeadProducts");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.LeadStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_LeadId")
                        .HasColumnType("int");

                    b.Property<int?>("FK_StatusId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("FK_LeadId");

                    b.HasIndex("FK_StatusId");

                    b.ToTable("LeadStatuses");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.LeadSubProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_LeadID")
                        .HasColumnType("int");

                    b.Property<int?>("FK_StagetId")
                        .HasColumnType("int");

                    b.Property<int?>("FK_SubProductId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("StageCount")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("FK_LeadID");

                    b.HasIndex("FK_StagetId");

                    b.HasIndex("FK_SubProductId");

                    b.HasIndex("ProductID");

                    b.ToTable("LeadSubProducts");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.MailsTracking", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotSentReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("MailsTrackings");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(575)
                        .HasColumnType("nvarchar(575)");

                    b.Property<string>("Address2")
                        .HasMaxLength(575)
                        .HasColumnType("nvarchar(575)");

                    b.Property<string>("City")
                        .HasMaxLength(575)
                        .HasColumnType("nvarchar(575)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_DeletedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_StateId")
                        .HasColumnType("int");

                    b.Property<int?>("FK_UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(275)
                        .HasColumnType("nvarchar(275)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(275)
                        .HasColumnType("nvarchar(275)");

                    b.Property<string>("MedicareID")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(275)
                        .HasColumnType("nvarchar(275)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Ssn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("ID");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("FK_DeletedBy");

                    b.HasIndex("FK_StateId");

                    b.HasIndex("FK_UpdatedBy");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AllowedStages")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_DeletedBy")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("Fk_DeletedBy");

                    b.HasIndex("Fk_UpdatedBy");

                    b.HasIndex("UserID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.SNS", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_LeadID")
                        .HasColumnType("int");

                    b.Property<int?>("FK_StatusID")
                        .HasColumnType("int");

                    b.Property<int?>("FK_UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("FK_LeadID")
                        .IsUnique()
                        .HasFilter("[FK_LeadID] IS NOT NULL");

                    b.HasIndex("FK_StatusID");

                    b.HasIndex("FK_UpdatedBy");

                    b.ToTable("SNS");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Stage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("StageNo")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Lead",
                            StageNo = 1
                        },
                        new
                        {
                            ID = 2,
                            Name = "Eligibility Verification",
                            StageNo = 2
                        },
                        new
                        {
                            ID = 3,
                            Name = "SNS Check",
                            StageNo = 3
                        },
                        new
                        {
                            ID = 4,
                            Name = "QA Verification",
                            StageNo = 4
                        },
                        new
                        {
                            ID = 5,
                            Name = "Proccesed Lead",
                            StageNo = 5
                        },
                        new
                        {
                            ID = 6,
                            Name = "Confirmation",
                            StageNo = 6
                        },
                        new
                        {
                            ID = 7,
                            Name = "Chassing Verification",
                            StageNo = 7
                        });
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.State", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(275)
                        .HasColumnType("nvarchar(275)");

                    b.Property<string>("Name")
                        .HasMaxLength(275)
                        .HasColumnType("nvarchar(275)");

                    b.HasKey("ID");

                    b.ToTable("States");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("Fk_StageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("Fk_StageId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Fk_StageId = 1,
                            Name = "New Lead"
                        },
                        new
                        {
                            ID = 2,
                            Fk_StageId = 1,
                            Name = "SNS Pending"
                        },
                        new
                        {
                            ID = 3,
                            Fk_StageId = 1,
                            Name = "QA Pending"
                        },
                        new
                        {
                            ID = 14,
                            Fk_StageId = 4,
                            Name = "QA Master"
                        },
                        new
                        {
                            ID = 15,
                            Fk_StageId = 1,
                            Name = "Chassing Pending"
                        },
                        new
                        {
                            ID = 4,
                            Fk_StageId = 2,
                            Name = "Ev Error"
                        },
                        new
                        {
                            ID = 5,
                            Fk_StageId = 2,
                            Name = "Medicare B"
                        },
                        new
                        {
                            ID = 6,
                            Fk_StageId = 2,
                            Name = "HMO"
                        },
                        new
                        {
                            ID = 7,
                            Fk_StageId = 2,
                            Name = "PPO"
                        },
                        new
                        {
                            ID = 8,
                            Fk_StageId = 2,
                            Name = "PPD"
                        },
                        new
                        {
                            ID = 9,
                            Fk_StageId = 2,
                            Name = "Part B In Active"
                        },
                        new
                        {
                            ID = 10,
                            Fk_StageId = 2,
                            Name = "In Active(PT Dead)"
                        },
                        new
                        {
                            ID = 11,
                            Fk_StageId = 3,
                            Name = "Pass"
                        },
                        new
                        {
                            ID = 12,
                            Fk_StageId = 3,
                            Name = "Fail"
                        },
                        new
                        {
                            ID = 13,
                            Fk_StageId = 3,
                            Name = "By Pass"
                        },
                        new
                        {
                            ID = 16,
                            Fk_StageId = 4,
                            Name = "Zero Processed"
                        },
                        new
                        {
                            ID = 17,
                            Fk_StageId = 4,
                            Name = "QA Qualified"
                        },
                        new
                        {
                            ID = 18,
                            Fk_StageId = 1,
                            Name = "QA Re-Examine"
                        },
                        new
                        {
                            ID = 19,
                            Fk_StageId = 1,
                            Name = "SNS Fail"
                        },
                        new
                        {
                            ID = 20,
                            Fk_StageId = 5,
                            Name = "Pending"
                        },
                        new
                        {
                            ID = 21,
                            Fk_StageId = 5,
                            Name = "Approved"
                        },
                        new
                        {
                            ID = 22,
                            Fk_StageId = 5,
                            Name = "Reject"
                        },
                        new
                        {
                            ID = 23,
                            Fk_StageId = 1,
                            Name = "Confirmation Pending"
                        },
                        new
                        {
                            ID = 24,
                            Fk_StageId = 3,
                            Name = "SNS Error"
                        },
                        new
                        {
                            ID = 25,
                            Fk_StageId = 4,
                            Name = "QA Error"
                        },
                        new
                        {
                            ID = 26,
                            Fk_StageId = 1,
                            Name = "Chassing Fail"
                        },
                        new
                        {
                            ID = 27,
                            Fk_StageId = 4,
                            Name = "Not Qualified"
                        },
                        new
                        {
                            ID = 28,
                            Fk_StageId = 1,
                            Name = "Call Verification Pending"
                        },
                        new
                        {
                            ID = 29,
                            Fk_StageId = 7,
                            Name = "Start Chassing"
                        },
                        new
                        {
                            ID = 30,
                            Fk_StageId = 7,
                            Name = "Denied Chassing"
                        });
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.SubProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("FK_ProductId");

                    b.ToTable("SubProducts");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("ActDctAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(275)
                        .HasColumnType("nvarchar(275)");

                    b.Property<int?>("Fk_ActDctBy")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_DeletedBy")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(275)
                        .HasColumnType("nvarchar(275)");

                    b.Property<DateTime?>("LockedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("LoginFailedCount")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("LoginFailedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NicNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Fk_ActDctBy");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_CreatedBy");

                    b.HasIndex("Fk_DeletedBy");

                    b.HasIndex("Fk_UpdatedBy");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.UserBonus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Fk_BonusFrom")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_BonusTo")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Fk_BonusFrom");

                    b.HasIndex("Fk_BonusTo");

                    b.ToTable("UserBonus");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fk_UserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Fk_UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Fk_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fk_CreatedBy");

                    b.HasIndex("Fk_RoleId");

                    b.HasIndex("Fk_UserId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.Branch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "DHA"
                        },
                        new
                        {
                            ID = 2,
                            Name = "PECHS"
                        });
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.Chassing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_LeadId")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("Fk_LeadId");

                    b.HasIndex("Fk_StatusId");

                    b.ToTable("Chassing");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.ChassingFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ChassingFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_LeadID")
                        .HasColumnType("int");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Fk_ChassingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChassingFileId");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("FK_LeadID");

                    b.HasIndex("Fk_ChassingId");

                    b.ToTable("ChassingFile");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.ChassingVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Fk_LeadId")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_UserId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_LeadId")
                        .IsUnique()
                        .HasFilter("[Fk_LeadId] IS NOT NULL");

                    b.HasIndex("Fk_StatusId");

                    b.HasIndex("Fk_UserId");

                    b.ToTable("ChassingVerifications");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.LeadAssigned", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_AgentId")
                        .HasColumnType("int");

                    b.Property<int>("FK_LeadId")
                        .HasColumnType("int");

                    b.Property<int>("FK_StageId")
                        .HasColumnType("int");

                    b.Property<int?>("FK_SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_AgentId");

                    b.HasIndex("FK_LeadId");

                    b.HasIndex("FK_StageId");

                    b.HasIndex("FK_SupervisorId");

                    b.ToTable("LeadAssigneds");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.PatientLogs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(575)
                        .HasColumnType("nvarchar(575)");

                    b.Property<string>("Address2")
                        .HasMaxLength(575)
                        .HasColumnType("nvarchar(575)");

                    b.Property<string>("City")
                        .HasMaxLength(575)
                        .HasColumnType("nvarchar(575)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_PatientID")
                        .HasColumnType("int");

                    b.Property<int?>("FK_StateId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(275)
                        .HasColumnType("nvarchar(275)");

                    b.Property<int?>("Fk_LeadId")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_StageId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(275)
                        .HasColumnType("nvarchar(275)");

                    b.Property<string>("MedicareID")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(275)
                        .HasColumnType("nvarchar(275)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Ssn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("ID");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("FK_PatientID");

                    b.HasIndex("FK_StateId");

                    b.HasIndex("Fk_LeadId");

                    b.HasIndex("Fk_StageId");

                    b.ToTable("PatientLogs");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.ProductQuestion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("FK_StageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FK_ProductId");

                    b.HasIndex("FK_StageId");

                    b.ToTable("ProductQuestions");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.ProductQuestionAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_LeadId")
                        .HasColumnType("int");

                    b.Property<int?>("FK_QuestionId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("FK_LeadId");

                    b.HasIndex("FK_QuestionId");

                    b.ToTable("ProductQuestionAnswers");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.QA", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_LeadID")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("Fk_LeadID");

                    b.HasIndex("Fk_StatusId");

                    b.ToTable("QAs");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.QAFiles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_QAId")
                        .HasColumnType("int");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FK_QAId");

                    b.ToTable("QAFiles");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.QaQuestionAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("FK_QaID")
                        .HasColumnType("int");

                    b.Property<int?>("FK_QuestionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FK_CreatedBy");

                    b.HasIndex("FK_QaID");

                    b.HasIndex("FK_QuestionID");

                    b.ToTable("QaQuestionAnswers");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.AgentPenalty", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithMany("AgentPenalties")
                        .HasForeignKey("Fk_LeadID");

                    b.HasOne("SNJGlobalAPI.DbModels.User", "PenaltyFrom")
                        .WithMany("PenaltyFrom")
                        .HasForeignKey("Fk_PenaltyFrom")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModels.User", "PenaltyTo")
                        .WithMany("PenaltyTo")
                        .HasForeignKey("Fk_PenaltyTo")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModels.Stage", "Stage")
                        .WithMany("AgentPenalties")
                        .HasForeignKey("Fk_StageId");

                    b.Navigation("Lead");

                    b.Navigation("PenaltyFrom");

                    b.Navigation("PenaltyTo");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Eligibility", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "User")
                        .WithMany("Eligibilities")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithMany("Eligibilities")
                        .HasForeignKey("FK_LeadID");

                    b.HasOne("SNJGlobalAPI.DbModels.Status", "Status")
                        .WithMany("Eligibilities")
                        .HasForeignKey("FK_StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.ForgetPassword", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "user")
                        .WithMany("forgetPasswords")
                        .HasForeignKey("Fk_UserId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Lead", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "CreatedBy")
                        .WithMany("Lead")
                        .HasForeignKey("FK_CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Parent")
                        .WithMany("ParentLeads")
                        .HasForeignKey("Fk_ParentId");

                    b.HasOne("SNJGlobalAPI.DbModels.Patient", "Patient")
                        .WithMany("Leads")
                        .HasForeignKey("Fk_PatientId");

                    b.HasOne("SNJGlobalAPI.DbModels.Status", "Status")
                        .WithMany("Lead")
                        .HasForeignKey("Fk_StatusId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Parent");

                    b.Navigation("Patient");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.LeadComments", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "User")
                        .WithMany("LeadComments")
                        .HasForeignKey("FK_CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithMany("LeadComments")
                        .HasForeignKey("FK_LeadID");

                    b.HasOne("SNJGlobalAPI.DbModels.Stage", "Stage")
                        .WithMany("LeadComments")
                        .HasForeignKey("Fk_StageId");

                    b.Navigation("Lead");

                    b.Navigation("Stage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.LeadFile", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "User")
                        .WithMany("LeadFiles")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithMany("LeadFiles")
                        .HasForeignKey("FK_LeadID");

                    b.HasOne("SNJGlobalAPI.DbModels.Stage", "stage")
                        .WithMany("LeadFiles")
                        .HasForeignKey("FK_StageId");

                    b.Navigation("Lead");

                    b.Navigation("User");

                    b.Navigation("stage");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.LeadProduct", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "CreatedBy")
                        .WithMany("LeadProducts")
                        .HasForeignKey("FK_CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithMany("LeadProducts")
                        .HasForeignKey("FK_LeadID");

                    b.HasOne("SNJGlobalAPI.DbModels.Product", "Product")
                        .WithMany("LeadProducts")
                        .HasForeignKey("FK_ProductId");

                    b.HasOne("SNJGlobalAPI.DbModels.Stage", null)
                        .WithMany("LeadProducts")
                        .HasForeignKey("StageID");

                    b.HasOne("SNJGlobalAPI.DbModels.SubProduct", null)
                        .WithMany("LeadProducts")
                        .HasForeignKey("SubProductID");

                    b.Navigation("CreatedBy");

                    b.Navigation("Lead");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.LeadStatus", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "createdBy")
                        .WithMany("LeadStatuses")
                        .HasForeignKey("FK_CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "lead")
                        .WithMany("leadStatuses")
                        .HasForeignKey("FK_LeadId");

                    b.HasOne("SNJGlobalAPI.DbModels.Status", "status")
                        .WithMany("leadStatuses")
                        .HasForeignKey("FK_StatusId");

                    b.Navigation("createdBy");

                    b.Navigation("lead");

                    b.Navigation("status");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.LeadSubProduct", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "CreatedBy")
                        .WithMany("LeadSubProducts")
                        .HasForeignKey("FK_CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithMany("LeadSubProducts")
                        .HasForeignKey("FK_LeadID");

                    b.HasOne("SNJGlobalAPI.DbModels.Stage", "Stage")
                        .WithMany("LeadSubProducts")
                        .HasForeignKey("FK_StagetId");

                    b.HasOne("SNJGlobalAPI.DbModels.SubProduct", "SubProduct")
                        .WithMany()
                        .HasForeignKey("FK_SubProductId");

                    b.HasOne("SNJGlobalAPI.DbModels.Product", null)
                        .WithMany("LeadSubProducts")
                        .HasForeignKey("ProductID");

                    b.Navigation("CreatedBy");

                    b.Navigation("Lead");

                    b.Navigation("Stage");

                    b.Navigation("SubProduct");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Patient", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "CreatedBy")
                        .WithMany("CreatedPatients")
                        .HasForeignKey("FK_CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModels.User", "DeletedBy")
                        .WithMany("DeletedPatients")
                        .HasForeignKey("FK_DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModels.State", "State")
                        .WithMany("Patients")
                        .HasForeignKey("FK_StateId");

                    b.HasOne("SNJGlobalAPI.DbModels.User", "UpdatedBy")
                        .WithMany("UpdatedPatients")
                        .HasForeignKey("FK_UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("State");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Product", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "CreatedBy")
                        .WithMany("CreatedProducts")
                        .HasForeignKey("FK_CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModels.User", "DeletedBy")
                        .WithMany("DeletedProducts")
                        .HasForeignKey("Fk_DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModels.User", "UpdatedBy")
                        .WithMany("UpdatedProducts")
                        .HasForeignKey("Fk_UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModels.User", null)
                        .WithMany("Products")
                        .HasForeignKey("UserID");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.SNS", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "CreatedBy")
                        .WithMany("CreatedSNS")
                        .HasForeignKey("FK_CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithOne("SNS")
                        .HasForeignKey("SNJGlobalAPI.DbModels.SNS", "FK_LeadID");

                    b.HasOne("SNJGlobalAPI.DbModels.Status", "Status")
                        .WithMany("SNS")
                        .HasForeignKey("FK_StatusID");

                    b.HasOne("SNJGlobalAPI.DbModels.User", "UpdateBy")
                        .WithMany("UpdatedSNS")
                        .HasForeignKey("FK_UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("Lead");

                    b.Navigation("Status");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Status", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.Stage", "Stage")
                        .WithMany("Statuses")
                        .HasForeignKey("Fk_StageId");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.SubProduct", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "CreatedBy")
                        .WithMany("SubProducts")
                        .HasForeignKey("FK_CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModels.Product", "Product")
                        .WithMany("SubProducts")
                        .HasForeignKey("FK_ProductId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.User", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "actDctBy")
                        .WithMany("userActDcts")
                        .HasForeignKey("Fk_ActDctBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModelsProduction.Branch", "branch")
                        .WithMany("Agents")
                        .HasForeignKey("Fk_BranchId");

                    b.HasOne("SNJGlobalAPI.DbModels.User", "creator")
                        .WithMany("userCreators")
                        .HasForeignKey("Fk_CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModels.User", "deletor")
                        .WithMany("userDeletors")
                        .HasForeignKey("Fk_DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModels.User", "updator")
                        .WithMany("userUpdators")
                        .HasForeignKey("Fk_UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("actDctBy");

                    b.Navigation("branch");

                    b.Navigation("creator");

                    b.Navigation("deletor");

                    b.Navigation("updator");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.UserBonus", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "BonusFrom")
                        .WithMany("BonusesFrom")
                        .HasForeignKey("Fk_BonusFrom")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModels.User", "BonusTo")
                        .WithMany("BonusesTo")
                        .HasForeignKey("Fk_BonusTo")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BonusFrom");

                    b.Navigation("BonusTo");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.UserLogin", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "user")
                        .WithMany("usersLogins")
                        .HasForeignKey("Fk_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.UserRole", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "creator")
                        .WithMany("userRolesCreators")
                        .HasForeignKey("Fk_CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModels.Role", "role")
                        .WithMany("userRoles")
                        .HasForeignKey("Fk_RoleId");

                    b.HasOne("SNJGlobalAPI.DbModels.User", "user")
                        .WithMany("usersRoles")
                        .HasForeignKey("Fk_UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("creator");

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.Chassing", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "CreatedBy")
                        .WithMany("Chassings")
                        .HasForeignKey("FK_CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithMany("Chassings")
                        .HasForeignKey("Fk_LeadId");

                    b.HasOne("SNJGlobalAPI.DbModels.Status", "Status")
                        .WithMany("Chassings")
                        .HasForeignKey("Fk_StatusId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Lead");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.ChassingFile", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModelsProduction.ChassingFile", null)
                        .WithMany("ChassingFiles")
                        .HasForeignKey("ChassingFileId");

                    b.HasOne("SNJGlobalAPI.DbModels.User", "CreatedBy")
                        .WithMany("ChassingFiles")
                        .HasForeignKey("FK_CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithMany("ChassingFiles")
                        .HasForeignKey("FK_LeadID");

                    b.HasOne("SNJGlobalAPI.DbModelsProduction.Chassing", "Chassing")
                        .WithMany("Files")
                        .HasForeignKey("Fk_ChassingId");

                    b.Navigation("Chassing");

                    b.Navigation("CreatedBy");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.ChassingVerification", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithOne("ChassingVerification")
                        .HasForeignKey("SNJGlobalAPI.DbModelsProduction.ChassingVerification", "Fk_LeadId");

                    b.HasOne("SNJGlobalAPI.DbModels.Status", "Status")
                        .WithMany("ChassingVerifications")
                        .HasForeignKey("Fk_StatusId");

                    b.HasOne("SNJGlobalAPI.DbModels.User", "CreatedBy")
                        .WithMany("ChassingVerifications")
                        .HasForeignKey("Fk_UserId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Lead");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.LeadAssigned", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "Agent")
                        .WithMany("LeadAssignedsTo")
                        .HasForeignKey("FK_AgentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithMany("LeadAssigneds")
                        .HasForeignKey("FK_LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SNJGlobalAPI.DbModels.Stage", "Stage")
                        .WithMany("LeadAssigneds")
                        .HasForeignKey("FK_StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SNJGlobalAPI.DbModels.User", "Supervisor")
                        .WithMany("LeadAssignedsFrom")
                        .HasForeignKey("FK_SupervisorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Agent");

                    b.Navigation("Lead");

                    b.Navigation("Stage");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.PatientLogs", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "CreatedBy")
                        .WithMany("PatientLogs")
                        .HasForeignKey("FK_CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModels.Patient", "Patient")
                        .WithMany("PatientLogs")
                        .HasForeignKey("FK_PatientID");

                    b.HasOne("SNJGlobalAPI.DbModels.State", "State")
                        .WithMany()
                        .HasForeignKey("FK_StateId");

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithMany("LeadLogs")
                        .HasForeignKey("Fk_LeadId");

                    b.HasOne("SNJGlobalAPI.DbModels.Stage", "Stage")
                        .WithMany("PatientLogs")
                        .HasForeignKey("Fk_StageId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Lead");

                    b.Navigation("Patient");

                    b.Navigation("Stage");

                    b.Navigation("State");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.ProductQuestion", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.Product", "Product")
                        .WithMany("ProductQuestions")
                        .HasForeignKey("FK_ProductId");

                    b.HasOne("SNJGlobalAPI.DbModels.Stage", "Stage")
                        .WithMany("ProductQuestions")
                        .HasForeignKey("FK_StageId");

                    b.Navigation("Product");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.ProductQuestionAnswer", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "User")
                        .WithMany("ProductQuestionAnswer")
                        .HasForeignKey("FK_CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithMany("ProductQuestionAnswer")
                        .HasForeignKey("FK_LeadId");

                    b.HasOne("SNJGlobalAPI.DbModelsProduction.ProductQuestion", "ProductQuestion")
                        .WithMany("ProductQuestionAnswer")
                        .HasForeignKey("FK_QuestionId");

                    b.Navigation("Lead");

                    b.Navigation("ProductQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.QA", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "CreatedBy")
                        .WithMany("CreatedByQA")
                        .HasForeignKey("FK_CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModels.Lead", "Lead")
                        .WithMany("QA")
                        .HasForeignKey("Fk_LeadID");

                    b.HasOne("SNJGlobalAPI.DbModels.Status", "Status")
                        .WithMany("QA")
                        .HasForeignKey("Fk_StatusId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Lead");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.QAFiles", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "User")
                        .WithMany("QAFiles")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModelsProduction.QA", "QA")
                        .WithMany("Files")
                        .HasForeignKey("FK_QAId");

                    b.Navigation("QA");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.QaQuestionAnswer", b =>
                {
                    b.HasOne("SNJGlobalAPI.DbModels.User", "CreatedBy")
                        .WithMany("CreatedQaAnswers")
                        .HasForeignKey("FK_CreatedBy");

                    b.HasOne("SNJGlobalAPI.DbModelsProduction.QA", "Qa")
                        .WithMany("Answers")
                        .HasForeignKey("FK_QaID");

                    b.HasOne("SNJGlobalAPI.DbModelsProduction.ProductQuestion", "Question")
                        .WithMany("QaQuestionAnswers")
                        .HasForeignKey("FK_QuestionID");

                    b.Navigation("CreatedBy");

                    b.Navigation("Qa");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Lead", b =>
                {
                    b.Navigation("AgentPenalties");

                    b.Navigation("ChassingFiles");

                    b.Navigation("ChassingVerification");

                    b.Navigation("Chassings");

                    b.Navigation("Eligibilities");

                    b.Navigation("LeadAssigneds");

                    b.Navigation("LeadComments");

                    b.Navigation("LeadFiles");

                    b.Navigation("LeadLogs");

                    b.Navigation("LeadProducts");

                    b.Navigation("LeadSubProducts");

                    b.Navigation("ParentLeads");

                    b.Navigation("ProductQuestionAnswer");

                    b.Navigation("QA");

                    b.Navigation("SNS");

                    b.Navigation("leadStatuses");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Patient", b =>
                {
                    b.Navigation("Leads");

                    b.Navigation("PatientLogs");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Product", b =>
                {
                    b.Navigation("LeadProducts");

                    b.Navigation("LeadSubProducts");

                    b.Navigation("ProductQuestions");

                    b.Navigation("SubProducts");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Role", b =>
                {
                    b.Navigation("userRoles");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Stage", b =>
                {
                    b.Navigation("AgentPenalties");

                    b.Navigation("LeadAssigneds");

                    b.Navigation("LeadComments");

                    b.Navigation("LeadFiles");

                    b.Navigation("LeadProducts");

                    b.Navigation("LeadSubProducts");

                    b.Navigation("PatientLogs");

                    b.Navigation("ProductQuestions");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.State", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.Status", b =>
                {
                    b.Navigation("ChassingVerifications");

                    b.Navigation("Chassings");

                    b.Navigation("Eligibilities");

                    b.Navigation("Lead");

                    b.Navigation("QA");

                    b.Navigation("SNS");

                    b.Navigation("leadStatuses");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.SubProduct", b =>
                {
                    b.Navigation("LeadProducts");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModels.User", b =>
                {
                    b.Navigation("BonusesFrom");

                    b.Navigation("BonusesTo");

                    b.Navigation("ChassingFiles");

                    b.Navigation("ChassingVerifications");

                    b.Navigation("Chassings");

                    b.Navigation("CreatedByQA");

                    b.Navigation("CreatedPatients");

                    b.Navigation("CreatedProducts");

                    b.Navigation("CreatedQaAnswers");

                    b.Navigation("CreatedSNS");

                    b.Navigation("DeletedPatients");

                    b.Navigation("DeletedProducts");

                    b.Navigation("Eligibilities");

                    b.Navigation("Lead");

                    b.Navigation("LeadAssignedsFrom");

                    b.Navigation("LeadAssignedsTo");

                    b.Navigation("LeadComments");

                    b.Navigation("LeadFiles");

                    b.Navigation("LeadProducts");

                    b.Navigation("LeadStatuses");

                    b.Navigation("LeadSubProducts");

                    b.Navigation("PatientLogs");

                    b.Navigation("PenaltyFrom");

                    b.Navigation("PenaltyTo");

                    b.Navigation("ProductQuestionAnswer");

                    b.Navigation("Products");

                    b.Navigation("QAFiles");

                    b.Navigation("SubProducts");

                    b.Navigation("UpdatedPatients");

                    b.Navigation("UpdatedProducts");

                    b.Navigation("UpdatedSNS");

                    b.Navigation("forgetPasswords");

                    b.Navigation("userActDcts");

                    b.Navigation("userCreators");

                    b.Navigation("userDeletors");

                    b.Navigation("userRolesCreators");

                    b.Navigation("userUpdators");

                    b.Navigation("usersLogins");

                    b.Navigation("usersRoles");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.Branch", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.Chassing", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.ChassingFile", b =>
                {
                    b.Navigation("ChassingFiles");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.ProductQuestion", b =>
                {
                    b.Navigation("ProductQuestionAnswer");

                    b.Navigation("QaQuestionAnswers");
                });

            modelBuilder.Entity("SNJGlobalAPI.DbModelsProduction.QA", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
